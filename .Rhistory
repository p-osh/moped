usethis::use_r("make.cat.R")
marginal.plot(fit)
devtools::load_all()
devtools::document()
?moped()
devtools::document()
test_that("check output has correct class", {
expect_s3_class(fit, "moped")
})
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
df_cont <- make.cont(df, catvar = 2:3)
# min & max of each columns
bounds <- data.frame(
carat  = c(0, 1.3),
cut = c(0, 1),
clarity = c(0, 1),
price = c(300, 2900)
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
test_that("check output has correct class", {
expect_s3_class(fit, "moped")
})
test_that("check arguments are correctly passed", {
# sample data
expect_identical(dim(fit[["SampleStats"]][["Sample"]]), dim(df_cont))
# maximum optimal MPO
expect_identical(max(fit$MPO$opt.mpo), 10)
# reference distribution
expect_identical(fit[["Distrib"]], rep("Uniform", 4))
})
max(fit$MPO$opt.mpo)
View(fit)
test_that("check arguments are correctly passed", {
# sample data
expect_identical(dim(fit[["SampleStats"]][["Sample"]]), dim(df_cont))
# maximum optimal MPO
expect_identical(max(fit$opt.mpo), 10)
# reference distribution
expect_identical(fit[["Distrib"]], rep("Uniform", 4))
})
fit$opt.mpo
fit$opt_mpo
test_that("check plot is printed", {
p <- marginal.plot(fit)
expect_error(print(p), NA)
})
?expect_doppelganger()
?vdiffr::expect_doppelganger
disp_hist_base <- function() hist(mtcars$disp)
View(disp_hist_base)
expect_doppelganger("disp-histogram-base", disp_hist_base)
vdiffr::expect_doppelganger("disp-histogram-base", disp_hist_base)
hist(mtcars$disp)
disp_hist_base
disp_hist_ggplot <- ggplot(mtcars, aes(disp)) + geom_histogram()
View(disp_hist_ggplot)
disp_hist_ggplot
p <- marginal.plot(fit)
vdiffr::expect_doppelganger("ggplot2 histogram", p)
#
#   hist_base <- function() hist(mtcars$disp)
#   vdiffr::expect_doppelganger("Base graphics histogram", hist_base)
})
View(p)
p[["ask"]]
expect_identical(fit[["Distrib"]], rep("Uniform", 4))
fit[["Distrib"]]
test_that("check arguments are correctly passed", {
# sample data
expect_identical(dim(fit[["SampleStats"]][["Sample"]]), dim(df_cont))
# maximum optimal MPO
# expect_identical(max(fit$opt_mpo), 10)
# reference distribution
expect_identical(fit[["Distrib"]], rep("Uniform", 4))
})
require(sdcMicro)
Data <- CASCrefmicrodata[,c(2,3,4,6)]
str(Data)
# Fitting multivariate orthogonal polynomial based
# density estimation function using default setting
Fit <- moped(Data)
#'
# Requires a data frame of bounds to fit on data.
bounds <- data.frame(
AGI  = c(7192, 109883),
EMCONTRB = c(17, 7800),
FEDTAX = c(1, 23386),
STATETAX = c(2,12628)
)
#'
#' # Fitting the Data
Fit <- moped(
Data_x,
K=10,
Distrib = rep("Uniform", 4),
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
Fit$opt_mpo
test_that("check all components in moped object are calculated", {
expect_identical(
c("Cn", "PolyCoef", "Poly", "MPO", "PDFControl", "NaTerms", "Cats", "Sigma",
"Tau", "Limits", "varCn", "Distrib", "Bounds", "PnList", "Lambda", "Bn",
"Recurrence", "KMax", "Paramaters", "Kappa", "Kappa2", "SampleStats"),
names(fit)
)
})
names(fit)
test_that("check all components in moped object are calculated", {
expect_identical(
c("Cn", "varCn", "Nv", "Nk_norm", "opt_mpo_vec", "opt_mpo", "Cats",
"Distrib", "PDFControl", "PolyCoef", "Poly", "Sigma", "Tau", "Lambda" ,
"Limits", "LeadingTerms", "KMax", "Paramaters", "Bounds", "SampleStats"),
names(fit)
)
})
usethis::use_test("predict")
test_that("check output has correct class", {
pred <- predict(fit, K = fit$opt_mpo)
expect_s3_class(pre, "data.frame")
})
test_that("check output has correct class", {
df_cont_1 <- df_cont[1,]
pred <- predict(fit, K = fit$opt_mpo, X = df_cont_1)
expect_s3_class(pre, "data.frame")
})
test_that("check output has correct class", {
df_cont_1 <- df_cont[1,]
pred <- predict(fit, K = fit$opt_mpo, X = df_cont_1)
expect_s3_class(pred, "data.frame")
})
View(df_cont)
View(df)
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 3:4],
variables = c("cut", "clarity"))
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
colnames(pred)
test_that("check joint density calculation", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
})
test_that("check joint density error", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = "cut")
expect_error(print(pred), "Error: Sample must be a data frame and contain columns named  cut clarity")
})
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = "cut")
View(pred)
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut"))
View(pred)
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3])
test_that("check joint density error", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3])
expect_error(print(pred), "Error: Sample must be a data frame and contain columns named  carat cut clarity price")
})
print(pred)
pred
test_that("check joint density error", {
expect_error(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named  carat cut clarity price")
})
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3])
print(pred)
return(pred)
?cat()
test_that("check joint density error", {
expect_identical(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named  carat cut clarity price")
})
colnames(fit$SampleStats$Sample)[variables]
colnames(fit$SampleStats$Sample)
test_that("check joint density error", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density calculation", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont$cut,
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = f_cont$cut,
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont$cut,
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont$cut,
variables = c("cut"))
df_cont$cut
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont$cut,
variables = c("cut"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
test_that("check joint density calculation", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
test_that("check joint density calculation", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2],
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
df_cont[, 2]
df_cont[, 2:3]
test_that("check joint density calculation", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont[, 2]),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
?`cat,NullVerbose-method`
usethis::use_test("m-resample")
devtools::document()
devtools::document()
View(df_cont)
test_that("check output is a data frame", {
resampled <- m.resample(fit,
K = fit$opt_mpo,
Sample = df_cont,
fixed.var = "carat")
expect_s3_class(resampled, "data.frame")
})
test_that("check output is a data frame", {
resampled <- m.resample(fit,
K = fit$opt_mpo,
Sample = df_cont,
n = 1000,
fixed.var = "carat")
expect_s3_class(resampled, "data.frame")
})
test_that("check output is a data frame", {
resampled <- m.resample(fit,
K = fit$opt_mpo,
Sample = df_cont,
n = 100,
fixed.var = "carat")
expect_s3_class(resampled, "data.frame")
})
test_that("check output is a data frame", {
resampled <- m.resample(fit,
K = fit$opt_mpo)
expect_s3_class(resampled, "data.frame")
})
fit$opt_mpo
install.packages("faraway")
resampled <- m.resample(fit,
K = fit$opt_mpo)
resampled <- m.resample(fit,
K = fit$opt_mpo,
replicates = 2)
View(resampled)
devtools::load_all()
resampled <- m.resample(fit,
K = fit$opt_mpo)
devtools::document()
install.packages("roxygen2")
devtools::document()
usethis::use_test("m-resample")
usethis::use_test()
usethis::use_test("predict")
devtools::document()
devtools::document()
devtools::document()
?moped()
library(moped)
library(tidyverse)
library(ISLR)
Data_full <- ISLR::Wage
# Must be a dataframe - Categorical Data should be factors
Data <- Data_full %>% select(age,education,jobclass,wage)
Data_x <- make.cont(Data,catvar = 2:3)
Data <- Data_full %>% select(age, maritl, race, education, jobclass, wage)
Data_amal <- make.cont(Data,catvar = c("maritl", "race", "education"," jobclass"),
amalgams = list(1:2,3:4))
# Must be a dataframe - Categorical Data should be factors
data <- data_full %>% select(age, education, jobclass, wage)
data_full <- ISLR::Wage
# Must be a dataframe - Categorical Data should be factors
data <- data_full %>% select(age, education, jobclass, wage)
data_x <- make.cont(data, catvar = 2:3)
# Must be a dataframe - Categorical Data should be factors
data <- data_full %>% select(age, education, jobclass, wage)
data_x <- make.cont(data, catvar = 2:3)
bounds <- data.frame(
age  = c(18,80),
education = c(0,1),
jobclass = c(0,1),
wage = c(0,350)
)
fit <- moped(data_x,  ## Data to fit Density Estimate on
K=10,    ## Maximum MPO Order
Distrib = rep("Uniform",7), ## Reference Density to be used for each column
bounds = bounds, # Data frame of min / max for each column
variance = T,  # Calculate a variance estimate of each coefficient
recurrence = F, # USe the recurrence relation to determine coefficient
parallel = F, # Parallel computing used (only on linux computers)
ncores = NULL, # NCores to use in parallel computing
mpo = T, #Determine an optimal MPO estimate
)
?moped()
?moped()
# compile documents
devtools::document()
?m.resample
require(sdcMicro)
Data <- CASCrefmicrodata[,c(2,3,4,6)]
Fit <- moped(Data)
library(moped)
str(Data)
# Generating resampled (synthetic) observations
# Sample 100 obs from moped joint density estimate without updating "AGI"
m.resample(Fit, K=3, Sample=Data_x, n = 100, fixed.var = "AGI")
# Generating resampled (synthetic) observations
# Sample 100 obs from moped joint density estimate without updating "AGI"
m.resample(Fit, K=3, Sample=Data, n = 100, fixed.var = "AGI")
head(Data)
#' # Simulate a fully resampled data set of same size as Data.
m.resample(Fit, K=3, replicates = 2) # 2 Gibbs passes used.
# Sample fully synthetic data set from marginal bivariate moped density
# estimate of "AGI" and "STATETAX"
resampled_marginal <- m.resample(Fit,
Sample = Data[,c(1,4)],
K = c(4,5),
variables = c(1,4),
replicates = 1
)
# Sample fully synthetic data set from marginal bivariate moped density
# estimate of "AGI" and "STATETAX"
m.resample(Fit, Sample = Data[,c(1,4)], K = c(4,5), variables = c(1,4),
replicates = 1)
m.resample(Fit, Sample = Data[,1], K = 4, variables = 1,
replicates = 1)
m.resample(Fit, Sample = Data[,1], K = 4)
m.resample(Fit, K = 4,variables = 1)
# Sample a fully resampled data set of same size as Data
m.reample(Fit, variables =1)
# Sample a fully resampled data set of same size as Data
m.resample(Fit, variables =1)
head(Data)
validate.mpo(fit = Fit)
#'
#' # Select the optimal polynomial order K
val <- validate.mpo(fit = Fit) #warning! it might take a while
val$opt_mpo
val$opt_mpo_vec
# compile documents
devtools::document()
?m.resample
??m.resample
library(moped)
?m.resample
?m.resample
# compile documents
devtools::document()
?moped
?moped::m.resample
library(moped)
# compile documents
devtools::document()
#set project to moped
devtools::load_all()
# compile documents
devtools::document()
?moped
?m.resample
?validate.mpo
?polynomial
?estimate.conditional
?estimate.marg.cdf
m.resample(Fit, Sample = data.frame(AGI = Data[,1]), K = 4, variables = 1,
replicates = 1)
#set project to moped
devtools::load_all()
require(sdcMicro)
Data <- CASCrefmicrodata[,c(2,3,4,6)]
Fit <- moped(Data)
m.resample(Fit, Sample = data.frame(AGI = Data[,1]), K = 4, variables = 1,
replicates = 1)
m.resample(Fit, Sample = data.frame(Data[,1]), K = 4, variables = 1,
replicates = 1)
data.frame(AGI=Data[,1])
m.resample(Fit, Sample = data.frame(AGI=Data[,1]), K = 4, variables = 1,
replicates = 1)
m.resample(Fit, Sample = data.frame(AGI=Data[,1]), K = 4, variables = 2,
replicates = 1)
m.resample(Fit, Sample = data.frame(AGI=Data[,1]), K = 4, variables = "AGI",
replicates = 1)
m.resample(Fit, Sample = data.frame(AGI=Data[,1]), K = 4, variables = "AGI")
m.resample(Fit, Sample = data.frame(AGI=Data[,1]), K = 4, variables = "AGI")
setwd("C:/Users/poshaugh/OneDrive - University of Wollongong/Pauline/UoW/Subject/STAT202/reference/STAT202/Assignments/Assignment1")
library("exams")
myExamQ <- list("Assig1_Q1.Rnw", "Assig1_Q2.Rnw", "Assig1_Q3.Rnw")
set.seed(1)
exams2pdf(myExamQ, n = 1, name = "Assignment1_",
template = list("Assig_Template"),
dir = "C:/Users/poshaugh/OneDrive - University of Wollongong/Pauline/UoW/Subject/STAT202/2022/Assignment/assign1/")
exams2pdf(myExamQ, n = 2, name = "Assignment1_",
template = list("Assig_Template"))
exams2pdf(myExamQ, n = 1, name = "Assignment1_Solution_",
template = list("Assig_Solution_Template"))
m.resample(Fit, Sample = data.frame(AGI=Data[,1]), K = 4, variables = "AGI")
#set project to moped
devtools::load_all()
