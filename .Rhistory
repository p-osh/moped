expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
test_that("check joint density calculation", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2],
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
df_cont[, 2]
df_cont[, 2:3]
test_that("check joint density calculation", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont[, 2]),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
?`cat,NullVerbose-method`
usethis::use_test("m-resample")
devtools::document()
devtools::document()
View(df_cont)
test_that("check output is a data frame", {
resampled <- m.resample(fit,
K = fit$opt_mpo,
Sample = df_cont,
fixed.var = "carat")
expect_s3_class(resampled, "data.frame")
})
test_that("check output is a data frame", {
resampled <- m.resample(fit,
K = fit$opt_mpo,
Sample = df_cont,
n = 1000,
fixed.var = "carat")
expect_s3_class(resampled, "data.frame")
})
test_that("check output is a data frame", {
resampled <- m.resample(fit,
K = fit$opt_mpo,
Sample = df_cont,
n = 100,
fixed.var = "carat")
expect_s3_class(resampled, "data.frame")
})
test_that("check output is a data frame", {
resampled <- m.resample(fit,
K = fit$opt_mpo)
expect_s3_class(resampled, "data.frame")
})
fit$opt_mpo
install.packages("faraway")
resampled <- m.resample(fit,
K = fit$opt_mpo)
resampled <- m.resample(fit,
K = fit$opt_mpo,
replicates = 2)
View(resampled)
devtools::load_all()
resampled <- m.resample(fit,
K = fit$opt_mpo)
devtools::document()
install.packages("roxygen2")
devtools::document()
usethis::use_test("m-resample")
usethis::use_test()
usethis::use_test("predict")
devtools::document()
devtools::document()
devtools::document()
?moped()
library(moped)
library(tidyverse)
library(ISLR)
Data_full <- ISLR::Wage
# Must be a dataframe - Categorical Data should be factors
Data <- Data_full %>% select(age,education,jobclass,wage)
Data_x <- make.cont(Data,catvar = 2:3)
Data <- Data_full %>% select(age, maritl, race, education, jobclass, wage)
Data_amal <- make.cont(Data,catvar = c("maritl", "race", "education"," jobclass"),
amalgams = list(1:2,3:4))
# Must be a dataframe - Categorical Data should be factors
data <- data_full %>% select(age, education, jobclass, wage)
data_full <- ISLR::Wage
# Must be a dataframe - Categorical Data should be factors
data <- data_full %>% select(age, education, jobclass, wage)
data_x <- make.cont(data, catvar = 2:3)
# Must be a dataframe - Categorical Data should be factors
data <- data_full %>% select(age, education, jobclass, wage)
data_x <- make.cont(data, catvar = 2:3)
bounds <- data.frame(
age  = c(18,80),
education = c(0,1),
jobclass = c(0,1),
wage = c(0,350)
)
fit <- moped(data_x,  ## Data to fit Density Estimate on
K=10,    ## Maximum MPO Order
Distrib = rep("Uniform",7), ## Reference Density to be used for each column
bounds = bounds, # Data frame of min / max for each column
variance = T,  # Calculate a variance estimate of each coefficient
recurrence = F, # USe the recurrence relation to determine coefficient
parallel = F, # Parallel computing used (only on linux computers)
ncores = NULL, # NCores to use in parallel computing
mpo = T, #Determine an optimal MPO estimate
)
?moped()
?moped()
Data_full <- ISLR::Wage
# Must be a dataframe - Categorical Data should be factors
Data <- Data_full %>% select(age, education, jobclass, wage)
library(moped)
devtools::load_all()
library(moped)
library(tidyverse)
library(ISLR)
Data_full <- ISLR::Wage
# Must be a dataframe - Categorical Data should be factors
Data <- Data_full %>% select(age, education, jobclass, wage)
Data_x <- make.cont(Data, catvar = 2:3)
Data <- Data_full %>% select(age, maritl, race, education, jobclass, wage)
Data_amal <- make.cont(Data,catvar = c("maritl", "race", "education"," jobclass"),
amalgams = list(1:2, 3:4))
Data <- Data_full %>% select(age, maritl, race, education, jobclass, wage)
Data_amal <- make.cont(Data, catvar = c("maritl", "race", "education"," jobclass"),
amalgams = list(1:2, 3:4))
View(Data)
View(Data)
Data <- Data_full %>% select(age, maritl, race, education, jobclass, wage)
Data_amal <- make.cont(Data, catvar = c("maritl", "race", "education", "jobclass"),
amalgams = list(1:2, 3:4))
# revert contimous variable back to categorical
make.cat(Data_amal)
Data_full <- ISLR::Wage
# Must be a dataframe - Categorical Data should be factors
Data <- Data_full %>% select(age, education, jobclass, wage)
Data_x <- make.cont(Data, catvar = 2:3)
# define bounds of Data
bounds <- data.frame(
age  = c(18,80),
education = c(0,1),
jobclass = c(0,1),
wage = c(0,350)
)
# define bounds of Data
bounds <- data.frame(
age  = c(18,80),
education = c(0,1),
jobclass = c(0,1),
wage = c(0,350)
)
fit <- moped(Data_x,
K=10,
Distrib = rep("Uniform", 7),
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T)
# Extraact maximum optimal MPO
fit$MPO$opt.mpo
fit <- moped(Data_x,
K=10,
Distrib = rep("Uniform", 7),
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T)
# Extraact maximum optimal MPO
fit$MPO$opt.mpo
fit$MPO$opt.mpo
fit$opt.mpo
View(fit)
fit$opt_mpo
fit <- moped(Data_x,
K=10,
Distrib = rep("Uniform", 7),
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T)
# Extraact maximum optimal MPO
fit$opt_mpo
Fit <- moped(Data_x,
K=10,
Distrib = rep("Uniform", 7),
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T)
# Extraact maximum optimal MPO
Fit$opt_mpo
marginal.plot(Fit, k.range = 3:8, ncol =3, prompt = FALSE)
# define the observation which the probability is desired
x0 <- Data_x[2,]
pred_1 <- predict(Fit,
K = 7,
X = x0,
type="distribution")
# when constructing partically joint density, sample and varaibles must be used together.
pred_2 <- predict(Fit,
K= 7,
X= Data_x[,3:4],
variables =c("jobclass", "wage"))
# marginal density
predict(Fit, K= 7, variables =4) %>%
ggplot(aes(x = wage, y = Density)) +
geom_line()
# bivariate density plot
predict(Fit, K = c(2,7), variables = 3:4) %>%
ggplot(aes(x = jobclass, y = wage, fill = Density)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral")
summary(cars)
plot(pressure)
# install.packages("devtools")
remotes::install_github("p-osh/moped")
test_that("check output is a data frame", {
df_cont_1 <- df_cont[1,]
pred <- predict(fit, K = fit$opt_mpo, X = df_cont_1)
expect_s3_class(pred, "data.frame")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named  carat cut clarity price")
})
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
df_cont <- make.cont(df, catvar = 2:3)
# min & max of each columns
bounds <- data.frame(
carat  = c(0, 1.3),
cut = c(0, 1),
clarity = c(0, 1),
price = c(300, 2900)
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
test_that("check output is a data frame", {
df_cont_1 <- df_cont[1,]
pred <- predict(fit, K = fit$opt_mpo, X = df_cont_1)
expect_s3_class(pred, "data.frame")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Conditional variables must be specified in cond.variables")
})
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3])
pred <- predict(fit,
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]
fit[["opt_mpo_vec"]]
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]
predict(fit,
View(df_cont)
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Conditional variables must also be specified in variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named ,carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named   carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  cut clarity")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named cut clarity")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
devtools::document()
devtools::load_all()
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
type == "conditional"),
"Conditional variables must also be specified in variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
type = "conditional"),
"Conditional variables must also be specified in variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
type = "conditional"),
"Conditional variables must also be specified in cond.variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
type = "conditional"),
"Conditional variables must be specified in cond.variables")
})
# define the observation which the probability is desired
x0 <- Data_x[2,]
pred_1 <- predict(Fit,
K = 7,
X = x0,
type = "distribution")
# when constructing partically joint density, sample and varaibles must be used together.
pred_2 <- predict(Fit,
K = 7,
X = Data_x[,3:4],
variables = c("jobclass", "wage"))
View(Data_x)
test_that("check density calculation with differen X", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
predict(Fit,
K = 7,
X = Data_x[,3:4])
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Conditional variables must be specified in cond.variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in `predict.moped(fit, K = fit$opt_mpo, X = df_cont[, 2:3])`: X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in predict.moped(fit, K = fit$opt_mpo, X = df_cont[, 2:3]): X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in predict.moped(fit, K = fit$opt_mpo, X = df_cont[, 2:3]) : X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in predict.moped(fit, K = fit$opt_mpo , X = df_cont[, 2:3]) : X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in predict.moped(fit, K = fit$opt_mpo, X = df_cont[, 2:3]) : X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity price")
})
?usethis::use_version()
usethis::use_version("minor")
devtools::check()
# install.packages("devtools")
remotes::install_github("p-osh/moped")
