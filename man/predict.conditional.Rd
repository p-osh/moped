% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.conditional.R
\name{predict.conditional}
\alias{predict.conditional}
\title{Compute unscaled MBD conditional distribution estimate}
\usage{
predict.conditional(
  fit,
  X = NULL,
  K.X = NULL,
  Y,
  K.Y = NULL,
  X.variable = NULL,
  Y.variables = NULL,
  X.bounds = NULL,
  Y.bounds = NULL
)
}
\arguments{
\item{fit}{MBDensity type variable. Outputed from \code{moped()}.}

\item{X}{Grid of probabilities to be calculated. If \code{NULL} (the default) than
generates nodes x Nv grid.}

\item{K.X}{Truncation to be used. If \code{NULL}( the default). it is max in Fit.}

\item{Y}{Grid of probabilities to be calculated. If \code{NULL} (the default),
than generates nodes x Nv grid.}

\item{K.Y}{Which variables to be predicted from Fit. If \code{NULL} (the default),
it is 1:Nv or 1:NCOL(X) whichever smallest.}

\item{X.variable}{(?Brad)}

\item{Y.variables}{(?Brad)}

\item{X.bounds}{A data frame. Bounds allows you to control the grid min and
Should be an array of 2 x number of variables.}

\item{Y.bounds}{(?Brad)}
}
\value{
\code{predict.conditional()} returns a list object
}
\description{
\code{predict.conditional()} is used to compute unscaled MBD conditional
distribution estimate.
}
\examples{
Data_full <- ISLR::Wage
Data <- Data_full \%>\%
select(age, education, jobclass,wage)

# Convert Categorical Data to Continuous Data
Data_x <- make.cont(Data, catvar = 2:3)

# Fitting multivariate orthogonal polynomial based
# density estimation function
# Requires a data frame of bounds to fit on data.
bounds <- data.frame(
age  = c(18,80),
education = c(0,1),
jobclass = c(0,1),
wage = c(0,350)
)

# Fitting the Data
Fit <- moped(
Data_x,
K=10,
Distrib = rep("Uniform", 7),
bounds = bounds,
variance = T,
recurrence = F,
parallel = F,
ncores = NULL,
mpo = T
)

# Compute MBD Conditional Distribution Estimate (unscaled)
Cond.prob <- predict.conditional(Fit,
X=seq(20,300,length.out=100),
Y = x0[rep(1,100),-4],
K.Y=rep(7,3),
K.X=c(7),
X.bounds = data.frame(wage=bounds$wage),
Y.bounds = bounds[,-4],
X.variable = 4,
Y.variables = 1:3)

plot(seq(20, 300, length.out = 100), Cond.prob$Prob)
}
