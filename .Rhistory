geom_line()
# bivariate density plot
predict(Fit, K = c(2,7), variables = 3:4) %>%
ggplot(aes(x = jobclass, y = wage, fill = Density)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral")
summary(cars)
plot(pressure)
# install.packages("devtools")
remotes::install_github("p-osh/moped")
test_that("check output is a data frame", {
df_cont_1 <- df_cont[1,]
pred <- predict(fit, K = fit$opt_mpo, X = df_cont_1)
expect_s3_class(pred, "data.frame")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named  carat cut clarity price")
})
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
df_cont <- make.cont(df, catvar = 2:3)
# min & max of each columns
bounds <- data.frame(
carat  = c(0, 1.3),
cut = c(0, 1),
clarity = c(0, 1),
price = c(300, 2900)
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
test_that("check output is a data frame", {
df_cont_1 <- df_cont[1,]
pred <- predict(fit, K = fit$opt_mpo, X = df_cont_1)
expect_s3_class(pred, "data.frame")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error: Sample must be a data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Conditional variables must be specified in cond.variables")
})
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3])
pred <- predict(fit,
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]
fit[["opt_mpo_vec"]]
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]
predict(fit,
View(df_cont)
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Conditional variables must also be specified in variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named ,carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named   carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  cut clarity")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named cut clarity")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
devtools::document()
devtools::load_all()
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
type == "conditional"),
"Conditional variables must also be specified in variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
type = "conditional"),
"Conditional variables must also be specified in variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
type = "conditional"),
"Conditional variables must also be specified in cond.variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
type = "conditional"),
"Conditional variables must be specified in cond.variables")
})
# define the observation which the probability is desired
x0 <- Data_x[2,]
pred_1 <- predict(Fit,
K = 7,
X = x0,
type = "distribution")
# when constructing partically joint density, sample and varaibles must be used together.
pred_2 <- predict(Fit,
K = 7,
X = Data_x[,3:4],
variables = c("jobclass", "wage"))
View(Data_x)
test_that("check density calculation with differen X", {
pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3],
variables = c("cut", "clarity"))
expect_identical(colnames(pred), c("cut", "clarity", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = c("cut"))
expect_identical(colnames(pred), c("cut", "Density"))
pred <- predict(fit,
K = fit$opt_mpo,
X = data.frame(cut = df_cont$cut),
variables = 2)
expect_identical(colnames(pred), c("cut", "Density"))
})
predict(Fit,
K = 7,
X = Data_x[,3:4])
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Conditional variables must be specified in cond.variables")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in `predict.moped(fit, K = fit$opt_mpo, X = df_cont[, 2:3])`: X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in predict.moped(fit, K = fit$opt_mpo, X = df_cont[, 2:3]): X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in predict.moped(fit, K = fit$opt_mpo, X = df_cont[, 2:3]) : X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in predict.moped(fit, K = fit$opt_mpo , X = df_cont[, 2:3]) : X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"Error in predict.moped(fit, K = fit$opt_mpo, X = df_cont[, 2:3]) : X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity price")
})
test_that("check joint density error ouput", {
expect_output(pred <- predict(fit,
K = fit$opt_mpo,
X = df_cont[, 2:3]),
"X must be data frame and contain columns named  carat cut clarity price")
})
?usethis::use_version()
usethis::use_version("minor")
devtools::check()
# install.packages("devtools")
remotes::install_github("p-osh/moped")
devtools::document()
?parallel
??parallel
devtools::document()
devtools::document()
?requireNamespace
devtools::document()
?setNames
?predict
?setNames
?runif
?median
?par
devtools::document()
devtools::document()
?warp_plots
?patchwork::wrap_plots
?ggplot2::ggtitle
?ggplot2::ggplot
?geom_histogram
?ggplot2::the
devtools::document()
devtools:;document()
devtools::document()
?plot_annotation
devtools::document()
devtools::document()
devtools::document()
devtools::document()
USAccDeaths
?USAccDeaths
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
library(tidyverse)
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
df_cont <- make.cont(df, catvar = 2:3)
# min & max of each columns
bounds <- data.frame(
carat  = c(0, 1.3),
cut = c(0, 1),
clarity = c(0, 1),
price = c(300, 2900)
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
View(df_cont)
test_that("check categorical variables are continulized", {
df_cont <- make.cont(df, catvar = 2:3)
expect_equal(class(df_cont$cut), "numeric")
expect_equal(class(df_cont$clarity), "numeric")
})
devtools::load_all()
test_that("check categorical variables are continulized", {
df_cont <- make.cont(df, catvar = 2:3)
expect_equal(class(df_cont$cut), "numeric")
expect_equal(class(df_cont$clarity), "numeric")
})
test_that("check categorical variables are continulized", {
expect_equal(class(df_cont$cut), "numeric")
expect_equal(class(df_cont$clarity), "numeric")
})
test_that("check specifing categorical variables by variable names", {
df_cont_name <- make.cont(df, catvar = c("cut","clarity"))
expect_equal(class(df_cont$cut), "numeric")
expect_equal(class(df_cont$clarity), "numeric")
})
?string_sort
?stri_sort
?diamonds
View(df)
data_amal <- make.cont(df,
catvar = c("cut","clarity"),
amalgams = list(1:2))
View(data_amal)
test_that("check amalgamated variables are continulized", {
data_amal <- make.cont(df,
catvar = c("cut","clarity"),
amalgams = list(1:2))
expect_equal(class(df_cont$AmalgamatedVar), "numeric")
})
test_that("check amalgamated variables are continulized", {
data_amal <- make.cont(df,
catvar = c("cut","clarity"),
amalgams = list(1:2))
expect_equal(class(data_amal$AmalgamatedVar), "numeric")
})
test_that("check categorical variables are continulized", {
expect_equal(class(df_cont$cut), "numeric")
expect_equal(class(df_cont$clarity), "numeric")
})
#> Test passed!
test_that("check specifing categorical variables by variable names", {
df_cont_name <- make.cont(df, catvar = c("cut","clarity"))
expect_equal(class(df_cont$cut), "numeric")
expect_equal(class(df_cont$clarity), "numeric")
})
#> Test passed!
test_that("check amalgamated variables are continulized", {
data_amal <- make.cont(df,
catvar = c("cut","clarity"),
amalgams = list(1:2))
expect_equal(class(data_amal$AmalgamatedVar), "numeric")
})
#> Test passed!
test_that("check continulized variables are converted back to categorical.", {
df_cat <- make.cat(df_cont)
expect_equal(class(df_caty$cut), "factor")
expect_equal(class(df_cat$clarity), "factor")
})
test_that("check continulized variables are converted back to categorical.", {
df_cat <- make.cat(df_cont)
expect_equal(class(df_cat$cut), "factor")
expect_equal(class(df_cat$clarity), "factor")
})
test_that("check continulized variables are converted back to categorical.", {
df_cat <- make.cat(df_cont)
expect_equal(class(df_cat$cut), "factor")
expect_equal(class(df_cat$clarity), "factor")
})
devtools::document()
test_that("check output has correct class", {
expect_s3_class(fit, "moped")
})
class(fit)
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
df_cont <- make.cont(df, catvar = 2:3)
# min & max of each columns
bounds <- data.frame(
carat  = c(0, 1.3),
cut = c(0, 1),
clarity = c(0, 1),
price = c(300, 2900)
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
View(data_amal)
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
df_cont <- make.cont(df, catvar = 2:3)
# min & max of each columns
bounds <- data.frame(
carat  = c(0, 1.3),
cut = c(0, 1),
clarity = c(0, 1),
price = c(300, 2900)
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
View(df_cont)
test_that("check arguments are correctly passed", {
# sample data
expect_identical(dim(fit[["SampleStats"]][["Sample"]]), dim(df_cont))
# maximum optimal MPO
expect_identical(max(fit$KMax), 10)
# reference distribution
expect_identical(fit[["Distrib"]], rep("Uniform", 4))
})
devtools::load_all()
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
df_cont <- make.cont(df, catvar = 2:3)
# min & max of each columns
bounds <- data.frame(
carat  = c(0, 1.3),
cut = c(0, 1),
clarity = c(0, 1),
price = c(300, 2900)
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T)
devtools::load_all()
df <- ggplot2::diamonds %>%
dplyr::select(carat, cut, clarity, price) %>%
head(1000) %>%
as.data.frame()
df_cont <- make.cont(df, catvar = 2:3)
# min & max of each columns
bounds <- data.frame(
carat  = c(0, 1.3),
cut = c(0, 1),
clarity = c(0, 1),
price = c(300, 2900)
)
fit <- moped(df_cont,
K = 10,
Distrib = rep("Uniform", 4), # 4 columns
bounds = bounds,
variance = T,
recurrence = F,
opt.mpo = T)
devtools::document()
